# Running Model {.unnumbered}

```{r, echo=FALSE, message=FALSE, results='hide'}
dem <- terra::rast("Data/PF_DTM3.tif")
multi_pts <- terra::vect("Data/multi_pts.shp")
simple_pts <- terra::vect("Data/simple_pts.shp")
grad20 <- terra::rast("Data/grad20.tif")
prof20 <- terra::rast("Data/prof20.tif")
plan20 <- terra::rast("Data/plan20.tif")
grad100 <- terra::rast("Data/grad100.tif")
prof100 <- terra::rast("Data/prof100.tif")
plan100 <- terra::rast("Data/plan100.tif")
dev100 <- terra::rast("Data/dev100.tif")
twi10 <- terra::rast("Data/twi10.tif")
load("Data/fun.RData")
in_rasts <- list(grad20 = grad20, prof20 = prof20,
                 plan20 = plan20, grad100 = grad100,
                 prof100 = prof100, plan100 = plan100,
                 dev100 = dev100, twi10 = twi10)
multi_mod <- build_model(in_rasts = in_rasts,
                         train = multi_pts, ref_raster = dem,
                         class_field_name = "class")

simple_mod <- build_model(in_rasts = in_rasts,
                          train = simple_pts, ref_raster = dem)
```

We have surface metrics and have built a model. Now it is time to run the model, which means it is finally time to make predictions and/or obtain probabilities. To accomplish this, we use the `run_model` function. The function either returns a classification raster or a set of probability rasters, depending on your choice.

## Parameters

| Inputs        | Description                                                                                                                         |
|--------------------|----------------------------------------------------|
| `in_rasts`    | List input that contains all the rasters that are chosen to be included in the model                                                |
| `poly_inputs` | List input that contains the polygons that are chosen to be included in the model, if any                                           |
| `ref_raster`  | Spatial raster input of the reference raster, which is used to align all of the other inputs. The DEM is usually a good choice here |
| `model_type`  | String input indicating type of machine learning model. Options include "forest", "tree", "glm", and "knn"                          |
| `class_rast`  | Binary parameter that determines whether the output will be probability rasters or a classification raster                          |
| `export`      | Binary parameter that determines whether or not the function exports the output to a file                                           |

## Executing the function

```{r}
prob_multi <- run_model(multi_mod, in_rasts = in_rasts,
                        ref_raster = dem)

prob_simple <- run_model(simple_mod, in_rasts = in_rasts,
                        ref_raster = dem)

```

The function outputs a SpatRaster object has probabilistic (or categorical) values and has the same extent (meaning) as the reference raster, as seen below.\

```{r}
prob_simple
```

Below is how the output looks like on a map

```{r, echo=FALSE}
col_fun <- colorRampPalette(c("gray95", "darkblue"))
terra::plot(prob_simple$WET, main = "Wetland Intrinsic Potential",
            col = col_fun(length(terra::values(prob_simple$WET))))
```

## Classification Option

Instead of returning probabilities, the `run_model` function also has an option to return a classification raster. This is often useful for when we testing the model to predict multiple types of wetlands (multi-class classification), since it is easier to comprehend one prediction rather than lots of probabilities.

```{r}
class_multi <- run_model(multi_mod, class_rast = TRUE,
                        in_rasts = in_rasts, ref_raster = dem)
class_multi
```

Here is what the output looks like on a map:

```{r, echo=FALSE}
terra::plot(class_multi, main = "Predicted Wetland", col = c("lightblue", "forestgreen", "dodgerblue", "darkblue", "wheat"), legend = FALSE)
terra::add_legend("bottomleft",
           legend=c("Emergent", "Forested/Shrub", "Pond",
                    "Riverine", "Upland"),
           col= c("lightblue", "forestgreen", "dodgerblue", "darkblue", "wheat"), cex = 0.8, lwd = 2)
```
