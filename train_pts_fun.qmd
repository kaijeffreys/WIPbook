# build_train_pts {.unnumbered}

```{r, eval=FALSE}
build_train_pts <- function(region_poly, wet_poly, multi_class = FALSE,
                            wet_types = c("Freshwater Forested/Shrub Wetland",
                                          "Freshwater Emergent Wetland",
                                          "Freshwater Pond",
                                          "Estuarine and Marine Wetland",
                                          "Riverine", "Lake",
                                          "Estuarine and Marine Deepwater",
                                          "Other"), wet_field = "WETLAND_TY",
                            sample_points = c(50, 150), export = FALSE) {
  
  # Loads in polygons if input is a file name
  if(is.character(wet_poly[[1]])) {
    temp_poly <- list()
    for(i in 1:length(wet_poly)) {
      temp_poly[[i]] <- terra::vect(wet_poly) 
    }
    wet_poly <- temp_poly
  }
  
  if(is.character(region_poly)) {
    region_poly <- terra::vect(region_poly)
  }
  
  # Filters the wetland polygons to only include wanted types
  wet_poly <- wet_poly[unlist(wet_poly[[wet_field]]) %in% wet_types]
  if(length(wet_poly) == 0) {
    stop("No wetlands to sample!")
  }
  
  # Cropping the wetland polygon(s) to the overall region
  wet_poly <- terra::project(wet_poly, region_poly)
  wet_poly <- terra::crop(wet_poly, region_poly)
  
  # Checks if output is supposed to be more than two classes before proceeding
  if(multi_class) {
    # Initialize parameters
    train_crds <- NULL
    train_atts <- c()
    wet_samp <- sample_points[1]
    up_samp <- sample_points[2]
    
    # Sample points for each wetland class
    for(i in 1:length(wet_types)) {
      temp_poly <- wet_poly[unlist(wet_poly[[wet_field]]) == wet_types[i]]
      
      # Checking if polygons of that type of wetland exist
      if(length(temp_poly) == 0) {
        warning(paste0(wet_types[i], " not found!"))
      }
      else {
        wet_crds <- NULL
        samp_wet_pts <- terra::spatSample(temp_poly, wet_samp)
        coords <- terra::crds(samp_wet_pts)
        wet_crds <- rbind(wet_crds, coords)
        
        num_coords <- nrow(coords)
        while(num_coords < wet_samp) {
          new_points <- terra::spatSample(temp_poly,
                                          wet_samp-(num_coords))
          new_crds <- terra::crds(new_points)
          wet_crds <- rbind(wet_crds, new_crds)
          num_coords <- num_coords + nrow(new_crds)
        }
        
        train_crds <- rbind(train_crds, wet_crds)
        train_atts <- c(train_atts, rep(wet_types[i], wet_samp))
      }
    }
    
    # Sample points from non-wetland areas
    up_poly <- terra::erase(region_poly, wet_poly)
    samp_up_pts <- terra::spatSample(up_poly, up_samp)
    up_crds <- terra::crds(samp_up_pts)
    
    # Create the points
    train_crds <- rbind(train_crds, up_crds)
    train_atts <- c(train_atts, rep("UPL", up_samp))
    train_atts <- data.frame(class = factor(train_atts))
    pts <- terra::vect(train_crds, atts = train_atts,
                       crs = terra::crs(region_poly))
  } else {
    
    # Sample the wetland points
    for(i in 1:length(wet_types)) {
      temp_poly <- wet_poly[unlist(wet_poly[[wet_field]]) == wet_types[i]]
      
      # Checking if polygons of that type of wetland exist
      if(length(temp_poly) == 0) {
        warning(paste0(wet_types[i], " not found!"))
      }
    }
    
    samp_wet_points <- terra::spatSample(wet_poly, sample_points[1])
    wet_crds <- terra::crds(samp_wet_points)
    num_wet <- nrow(wet_crds)
    while(num_wet < sample_points[1]) {
      new_points <- terra::spatSample(temp_poly,
                                      num_points[i]-(num_wet))
      new_crds <- terra::crds(new_points)
      wet_crds <- rbind(wet_crds, new_crds)
      num_wet <- num_wet + nrow(new_crds)
    }
    
    # Sample points from non-wetland areas
    up_poly <- terra::erase(region_poly, wet_poly)
    samp_up_pts <- terra::spatSample(up_poly, sample_points[2])
    up_crds <- terra::crds(samp_up_pts)
    num_up <- nrow(up_crds)
    
    # Create the points
    train_crds <- rbind(wet_crds, up_crds)
    train_atts <- data.frame(class = factor(c(rep("WET", num_wet),
                                              rep("UPL", num_up))))
    pts <- terra::vect(train_crds, atts = train_atts,
                       crs = terra::crs(region_poly))
  }
  
  # Return the points and exports them, if desired
  if(export) {
    terra:writeVector(pts, filename = "trainingdata.shp")
  }
  
  return(pts)
}
```
